// Code generated by MockGen. DO NOT EDIT.
// Source: dataref.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/xairline/xa-snow/models"
)

// MockDatarefService is a mock of DatarefService interface.
type MockDatarefService struct {
	ctrl     *gomock.Controller
	recorder *MockDatarefServiceMockRecorder
}

// MockDatarefServiceMockRecorder is the mock recorder for MockDatarefService.
type MockDatarefServiceMockRecorder struct {
	mock *MockDatarefService
}

// NewMockDatarefService creates a new mock instance.
func NewMockDatarefService(ctrl *gomock.Controller) *MockDatarefService {
	mock := &MockDatarefService{ctrl: ctrl}
	mock.recorder = &MockDatarefServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatarefService) EXPECT() *MockDatarefServiceMockRecorder {
	return m.recorder
}

// GetFloatValueByDatarefName mocks base method.
func (m *MockDatarefService) GetFloatValueByDatarefName(dataref string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatValueByDatarefName", dataref)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloatValueByDatarefName indicates an expected call of GetFloatValueByDatarefName.
func (mr *MockDatarefServiceMockRecorder) GetFloatValueByDatarefName(dataref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatValueByDatarefName", reflect.TypeOf((*MockDatarefService)(nil).GetFloatValueByDatarefName), dataref)
}

// GetNearestAirport mocks base method.
func (m *MockDatarefService) GetNearestAirport() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestAirport")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetNearestAirport indicates an expected call of GetNearestAirport.
func (mr *MockDatarefServiceMockRecorder) GetNearestAirport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestAirport", reflect.TypeOf((*MockDatarefService)(nil).GetNearestAirport))
}

// GetStringValueByDatarefName mocks base method.
func (m *MockDatarefService) GetStringValueByDatarefName(dataref string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringValueByDatarefName", dataref)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStringValueByDatarefName indicates an expected call of GetStringValueByDatarefName.
func (mr *MockDatarefServiceMockRecorder) GetStringValueByDatarefName(dataref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringValueByDatarefName", reflect.TypeOf((*MockDatarefService)(nil).GetStringValueByDatarefName), dataref)
}

// GetValueByDatarefName mocks base method.
func (m *MockDatarefService) GetValueByDatarefName(dataref, name string, precision *int8, isByteArray bool) models.DatarefValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByDatarefName", dataref, name, precision, isByteArray)
	ret0, _ := ret[0].(models.DatarefValue)
	return ret0
}

// GetValueByDatarefName indicates an expected call of GetValueByDatarefName.
func (mr *MockDatarefServiceMockRecorder) GetValueByDatarefName(dataref, name, precision, isByteArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByDatarefName", reflect.TypeOf((*MockDatarefService)(nil).GetValueByDatarefName), dataref, name, precision, isByteArray)
}

// SetValueByDatarefName mocks base method.
func (m *MockDatarefService) SetValueByDatarefName(dataref string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValueByDatarefName", dataref, value)
}

// SetValueByDatarefName indicates an expected call of SetValueByDatarefName.
func (mr *MockDatarefServiceMockRecorder) SetValueByDatarefName(dataref, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValueByDatarefName", reflect.TypeOf((*MockDatarefService)(nil).SetValueByDatarefName), dataref, value)
}

// getCurrentValue mocks base method.
func (m *MockDatarefService) getCurrentValue(datarefExt *models.DatarefExt) models.DatarefValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCurrentValue", datarefExt)
	ret0, _ := ret[0].(models.DatarefValue)
	return ret0
}

// getCurrentValue indicates an expected call of getCurrentValue.
func (mr *MockDatarefServiceMockRecorder) getCurrentValue(datarefExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentValue", reflect.TypeOf((*MockDatarefService)(nil).getCurrentValue), datarefExt)
}
